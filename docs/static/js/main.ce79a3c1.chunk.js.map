{"version":3,"sources":["constants.js","components/DataForm.js","components/CommonCharts.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/all-categories.js","store/reducers/all-areas.js","store/index.js","index.js"],"names":["KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_REPORT_TIME","COL_DUTY_WORKER","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","concat","toConsumableArray","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","WrapDataForm","create","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","margin","height","tooltipConifg","trigger","axisPointer","crossStyle","CommonCharts","core_default","style","echarts","option","title","objectSpread","text","title1","tooltip","toolbox","xAxis","data","interval","axisLabel","rotate","yAxis","name","min","max","series","barMaxWidth","position","formatter","graphData","totalAcceptData","yAxisIndex","overallCloseRateData","title2","newAddedAcceptData","newAddedCloseRateData","title5","radius","openData","title3","legend","needHandleAcceptData","needHandleCloseOnTimeRateData","needHandleCloseRateData","title4","closeAverageHandleTimeData","openAverageHandleTimeData","ChartView","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","components_CommonCharts","areaGraphData","allAreas","categoryGraphData","allCategories","allCities","projectGraphData","allProjects","stageGraphData","allStages","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","filter","filteredProjects","length","filteredItems","currentPageData","dataSource","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","statisticItem","rowData","_i","_arr","category","push","return","formatToRateTable","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_i2","_arr2","ProjectView","filterProjects","projects","filterItems","items","exportData","header","sheet1","XLSX","utils","json_to_sheet","periodNewAddedResult","sheet2","thisYearBeforePeriodResult","sheet3","thisYearBeforePeriodTotalResult","sheet4","thisYearTotalResult","sheet5","lastYearBeforePeriodResult","sheet6","lastYearBeforePeriodTotalResult","sheet7","beforePeriodNeedHandleResult","sheet8","periodTotalResult","sheet9","rateResult","workbook","book_new","book_append_sheet","writeFile","moment","now","format","es_select","mode","onChange","project","Option","components_ProjectTable","initStatisticItem","itemName","initRate","getCategory","ticket","getItem","colContent","statisticCloseHandleTime","ticketStatistic","ticketCloseTime","ticketReportTime","ticketPauseDuration","closeHandleTime","duration","diff","subtract","as","statisticOpenHandleTime","closeEndTime","openHandleTime","statisticRate","statisticMap","rateMap","toFixed","statistc","periodTickets","beforePeriodTickets","thisYearTotalTickets","lastYearBeforePeriodTickets","col","allItems","yearStartTime","month","date","tickets","closeStartTime","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCategory","ticketStatus","ticketResponseAlarm","ticketReplyAlarm","Number","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","statisticPeriodNewAddedTickets","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","statisticThisYearTotalTickets","array","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","result","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","statisticBeforePeriodNeedHandleResult","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","statisticPeriodTotalResult","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","formatGraphData","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","formatCategoryGraphData","area","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","App","start","addCategories","fileReader","FileReader","readFile","onload","event","read","target","sheet","Sheets","SheetNames","sheet_to_json","blankrows","readAsBinaryString","readExcelData","allWorkers","stage","Util","city","console","log","worker","reportTime","workerData","stageData","projectData","cityData","areaData","className","components_DataForm","tabs","TabPane","tab","components_ChartView","components_ProjectView","mapDispatchToProps","categories","payload","ConnectedApp","connect","reducer","combineReducers","arguments","action","areas","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","locale_provider","locale","zh_CN","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ce79a3c1.chunk.js","sourcesContent":["// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\nexport const TICKET_NOT_REPLY = '未回复';\r\nexport const TICKET_REPLY_OVER_48 = '回复超时';\r\nexport const TICKET_CLOSE_HANDLE_TIME_0_7 = '已关处理时长（0-7天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_7_15 = '已关处理时长（7-15天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_15_30 = '已关处理时长（15-30天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_30_60 = '已关处理时长（30-60天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_OVER_60 = '已关处理时长（大于60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_0_30 = '未关处理时长（0-30天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_30_40 = '未关处理时长（30-40天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_40_50 = '未关处理时长（40-50天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_50_60 = '未关处理时长（50-60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_OVER_60 = '未关处理时长（大于60天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_REPLY_OVER_48,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '分期';\r\nexport const COL_CURRENT_STATUS = '工单状态';\r\nexport const COL_CATEGORY = '问题分类';\r\nexport const COL_REPORT_TIME = '受理时间';\r\nexport const COL_RESPONSE_ALARM_LEVEL = '响应预警等级';\r\nexport const COL_REPLY_ALARM_LEVEL = '回复预警等级';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME = '关闭时间';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\nexport const COL_DUTY_WORKER = '责任人';\r\nexport const CONTENT_UNKNOWN = '空白';\r\nexport const COL_REPLY_ALARM_MSG = '回复预警消息';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const OVER_48_HOUR_NO_REPLY_ALARM = '超过48小时未回复';\r\n\r\nexport const ALARM_VALUE = '红色预警';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID_APPROVE: '无效审批中',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '处理中',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建',\r\n  CLOSE_APPROVING: '关闭审批中',\r\n  REPLY: '已回复'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '营销管理类',\r\n  '规划设计类',\r\n  '工程质量类',\r\n  '物业管理类',\r\n  '客户服务类',\r\n  '产证咨询类',\r\n  '投诉-其他类',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_NOT_REPLY,\r\n  TICKET_REPLY_OVER_48,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_40,\r\n  TICKET_OPEN_HANDLE_TIME_40_50,\r\n  TICKET_OPEN_HANDLE_TIME_50_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60\r\n]\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,.xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\n\r\nfunction CommonCharts(props) {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title1,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.totalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.overallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title2,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title5,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.graphData.openData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title3,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row style={{ margin: '40px 0' }}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title4,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.closeAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.openAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommonCharts;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nimport Charts from './CommonCharts';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\nfunction ChartView(props) {\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Charts graphData={props.areaGraphData} xAxis={props.allAreas}\r\n        title= {{\r\n          title1: \"大区日常维修总体关闭率\",\r\n          title2: \"大区新增维修关闭率\",\r\n          title3: \"大区需处理关闭率\",\r\n          title4: \"大区新增平均处理时长\",\r\n          title5: \"大区剩余未关分布图\",\r\n        }}\r\n        />\r\n      <Charts graphData={props.categoryGraphData} xAxis={props.allCategories}\r\n        title= {{\r\n          title1: \"分类日常维修总体关闭率\",\r\n          title2: \"分类新增维修关闭率\",\r\n          title3: \"分类需处理关闭率\",\r\n          title4: \"分类新增平均处理时长\",\r\n          title5: \"分类剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.cityGraphData} xAxis={props.allCities}\r\n        title={{\r\n          title1: \"各城市日常维修总体关闭率\",\r\n          title2: \"各城市新增维修关闭率\",\r\n          title3: \"各城市需处理关闭率\",\r\n          title4: \"各城市新增平均处理时长\",\r\n          title5: \"各城市剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.projectGraphData} xAxis={props.allProjects}\r\n        title={{\r\n          title1: \"各项目日常维修总体关闭率\",\r\n          title2: \"各项目新增维修关闭率\",\r\n          title3: \"各项目需处理关闭率\",\r\n          title4: \"各项目新增平均处理时长\",\r\n          title5: \"各项目剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.stageGraphData} xAxis={props.allStages}\r\n        title= {{\r\n          title1: \"各项目分期日常维修总体关闭率\",\r\n          title2: \"各项目分期新增维修关闭率\",\r\n          title3: \"各项目分期需处理关闭率\",\r\n          title4: \"各项目分期新增平均处理时长\",\r\n          title5: \"各项目分期剩余未关分布图\",\r\n        }}\r\n        />\r\n      {/* <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关分类图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '一级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.categoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n\r\n  // return (\r\n  //   <div>\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allCities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目分期日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 height: 300,\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市剩余未关',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关二级分类分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '二级分类',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市新增维修关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '项目新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '分期新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修二级分类分布图',\r\n  //             left: 'center',\r\n  //             textStyle: {\r\n  //               color: '#000000'\r\n  //             }\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.needHandleProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '平均处理时长城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: ['已关闭', '剩余未关'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: [\r\n  //             {\r\n  //               name: '已关闭',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityCloseAverageHandleTimeData\r\n  //             },\r\n  //             {\r\n  //               name: '剩余未关',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityOpenAverageHandleTimeData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '已关闭维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: newAddedCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: cityCategoryCloseAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: openAverageHandleTimeCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: citySecondCategoryOpenAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row> */}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title=\"名称\"\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  let data = props.data.filter(item => {\r\n    if (props.filteredProjects.length > 0 && props.filteredItems.length > 0) {\r\n      return props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1 &&\r\n        props.filteredItems.indexOf(item[KEY_STATISTIC_ITEM]) !== -1;\r\n    } else if (props.filteredProjects.length === 0 && props.filteredItems.length > 0) {\r\n      return props.filteredItems.indexOf(item[KEY_STATISTIC_ITEM]) !== -1;\r\n    } else if (props.filteredProjects.length > 0 && props.filteredItems.length === 0) {\r\n      return props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select, Button } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE,\r\n  CATEGORIES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  KEY_TICKET_TOTAL,\r\n  STATISTIC_ITEMS\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\nimport XLSX from 'xlsx';\r\nimport moment from 'moment';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {},\r\n    projects: [],\r\n    items: STATISTIC_ITEMS,\r\n    name: 'statistic'\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: [],\r\n      filteredItems: [],\r\n      loading: false\r\n    }\r\n    this.exportData = this.exportData.bind(this);\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    this.setState({\r\n      filteredProjects: projects.length > 0 ? projects : []\r\n    })\r\n  }\r\n\r\n  filterItems = (items) => {\r\n    this.setState({\r\n      filteredItems: items.length > 0 ? items : []\r\n    });\r\n  }\r\n\r\n  exportData() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...CATEGORIES, KEY_TICKET_TOTAL];\r\n    let sheet1 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.periodNewAddedResult), {\r\n      header: header\r\n    });\r\n    let sheet2 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearBeforePeriodResult), {\r\n      header: header\r\n    });\r\n    let sheet3 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearBeforePeriodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet4 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet5 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.lastYearBeforePeriodResult), {\r\n      header: header\r\n    });\r\n    let sheet6 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.lastYearBeforePeriodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet7 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.beforePeriodNeedHandleResult), {\r\n      header: header\r\n    });\r\n    let sheet8 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.periodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet9 = XLSX.utils.json_to_sheet(formatToRateTable(this.props.data.rateResult), {\r\n      header: header\r\n    });\r\n    let workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\r\n    XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\r\n    XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\r\n    XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\r\n    XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\r\n    XLSX.writeFile(workbook, this.props.name + '-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\r\n    this.setState({\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.props.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button loading={this.state.loading} onClick={this.exportData}>导出数据</Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label=\"请选择要过滤的统计项目\"\r\n                labelCol={{ span: 6 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterItems}\r\n                >\r\n                  {\r\n                    this.props.items.map((item) => (\r\n                      <Select.Option key={item}>{item}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n              filteredItems={this.state.filteredItems}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_CATEGORY,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME,\r\n  COL_REPLY_ALARM_MSG,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_NOT_REPLY,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_REPLY_OVER_48,\r\n  COL_RESPONSE_ALARM_LEVEL,\r\n  COL_REPLY_ALARM_LEVEL,\r\n  ALARM_VALUE,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_40,\r\n  TICKET_OPEN_HANDLE_TIME_40_50,\r\n  TICKET_OPEN_HANDLE_TIME_50_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60,\r\n  OVER_48_HOUR_NO_REPLY_ALARM,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS,\r\n  CONTENT_UNKNOWN,\r\n} from '../constants';\r\n\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_CATEGORY] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const getItem = colContent => colContent || CONTENT_UNKNOWN;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  // name.replace(STAGE, '');\r\n  return filteredName;\r\n}\r\n\r\nconst statisticCloseHandleTime = (ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration) => {\r\n  let closeHandleTime = moment.duration(ticketCloseTime.diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n    closeHandleTime;\r\n\r\n  if (closeHandleTime < 7) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_0_7]++;\r\n  } else if (closeHandleTime < 15) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_7_15]++;\r\n  } else if (closeHandleTime < 30) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_15_30]++;\r\n  } else if (closeHandleTime < 60) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_30_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\nconst statisticOpenHandleTime = (ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration) => {\r\n  let openHandleTime = moment.duration(moment(closeEndTime).diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n    openHandleTime;\r\n\r\n  if (openHandleTime < 30) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_0_30]++;\r\n  } else if (openHandleTime < 40) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_30_40]++;\r\n  } else if (openHandleTime < 50) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_40_50]++;\r\n  } else if (openHandleTime < 60) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_50_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketResponseAlarm = ticket[COL_RESPONSE_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReplyAlarm = ticket[COL_REPLY_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]) || 0;\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    // 受理= 新建+已分派+已响应+方案制定中+方案批准中+方案已批准+已回复+处理中+ 已关闭+非正常关闭+已评价+强制关闭（受理时间在周期内）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 未关闭=新建+已分派+已响应+方案制定中+方案已批准+关闭审批中+已回复+处理中（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n\t\t\tticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING) ||\r\n\t\t\t((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n\t\t\t\tticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 响应预警等级（红色预警）\r\n    if (ticketResponseAlarm) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 未回复=回复预警等级（红色预警）\r\n    if (ticketReplyAlarm) {\r\n      ticketStatistic[TICKET_NOT_REPLY]++;\r\n    }\r\n\r\n    // 无效 = 无效 + 无效审批中\r\n    if (ticketStatus === TICKET_STATUS.INVALID || ticketStatus === TICKET_STATUS.INVALID_APPROVE) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n\r\n    if (ticket[COL_REPLY_ALARM_MSG] === OVER_48_HOUR_NO_REPLY_ALARM) {\r\n      ticketStatistic[TICKET_REPLY_OVER_48]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketResponseAlarm = ticket[COL_RESPONSE_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReplyAlarm = ticket[COL_REPLY_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]) || 0;\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    //  受理= 新建+已分派+已响应+方案制定中+方案批准中+方案已批准+已回复+处理中+\r\n    //        已关闭+非正常关闭+已评价+强制关闭（关单时间在统计开始日期后）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n\t\t\tticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING) ||\r\n\t\t\t((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 响应预警等级（红色预警）\r\n    if (ticketResponseAlarm) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 未回复=回复预警等级（红色预警）\r\n    if (ticketReplyAlarm) {\r\n      ticketStatistic[TICKET_NOT_REPLY]++;\r\n    }\r\n\r\n    // 无效 = 无效 + 无效审批中\r\n    if (ticketStatus === TICKET_STATUS.INVALID || ticketStatus === TICKET_STATUS.INVALID_APPROVE) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n\r\n    if (ticket[COL_REPLY_ALARM_MSG] === OVER_48_HOUR_NO_REPLY_ALARM) {\r\n      ticketStatistic[TICKET_REPLY_OVER_48]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计周期）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n        ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketResponseAlarm = ticket[COL_RESPONSE_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReplyAlarm = ticket[COL_REPLY_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]) || 0;\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime)) {\r\n        ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 响应预警等级（红色预警）\r\n    if (ticketResponseAlarm) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 未回复=回复预警等级（红色预警）\r\n    if (ticketReplyAlarm) {\r\n      ticketStatistic[TICKET_NOT_REPLY]++;\r\n    }\r\n\r\n    // 无效 = 无效 + 无效审批中\r\n    if (ticketStatus === TICKET_STATUS.INVALID || ticketStatus === TICKET_STATUS.INVALID_APPROVE) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n\r\n    if (ticket[COL_REPLY_ALARM_MSG] === OVER_48_HOUR_NO_REPLY_ALARM) {\r\n      ticketStatistic[TICKET_REPLY_OVER_48]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketResponseAlarm = ticket[COL_RESPONSE_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReplyAlarm = ticket[COL_REPLY_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]) || 0;\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime)) {\r\n        ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 响应预警等级（红色预警）\r\n    if (ticketResponseAlarm) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 未回复=回复预警等级（红色预警）\r\n    if (ticketReplyAlarm) {\r\n      ticketStatistic[TICKET_NOT_REPLY]++;\r\n    }\r\n\r\n    // 无效 = 无效 + 无效审批中\r\n    if (ticketStatus === TICKET_STATUS.INVALID || ticketStatus === TICKET_STATUS.INVALID_APPROVE) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n\r\n    if (ticket[COL_REPLY_ALARM_MSG] === OVER_48_HOUR_NO_REPLY_ALARM) {\r\n      ticketStatistic[TICKET_REPLY_OVER_48]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = getItem(ticket[col]);\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketResponseAlarm = ticket[COL_RESPONSE_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReplyAlarm = ticket[COL_REPLY_ALARM_LEVEL] === ALARM_VALUE;\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]) || 0;\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.FORCE_CLOSE) &&\r\n      ticketCloseTime >= closeStartTime)) {\r\n        ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.INVALID_APPROVE || ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.REPLY || ticketStatus === TICKET_STATUS.CLOSE_APPROVING) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 响应预警等级（红色预警）\r\n    if (ticketResponseAlarm) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 未回复=回复预警等级（红色预警）\r\n    if (ticketReplyAlarm) {\r\n      ticketStatistic[TICKET_NOT_REPLY]++;\r\n    }\r\n\r\n    // 无效 = 无效 + 无效审批中\r\n    if (ticketStatus === TICKET_STATUS.INVALID || ticketStatus === TICKET_STATUS.INVALID_APPROVE) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n\r\n    if (ticket[COL_REPLY_ALARM_MSG] === OVER_48_HOUR_NO_REPLY_ALARM) {\r\n      ticketStatistic[TICKET_REPLY_OVER_48]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const statistc = (periodTickets, beforePeriodTickets, thisYearTotalTickets,\r\n  lastYearBeforePeriodTickets, startTime, endTime, col, allItems) => {\r\n  let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\r\n  let data = {};\r\n  data.periodNewAddedResult = statisticPeriodNewAddedTickets(periodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodTotalResult = statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.beforePeriodNeedHandleResult = statisticBeforePeriodNeedHandleResult([\r\n    data.periodNewAddedResult, data.thisYearBeforePeriodResult,\r\n    data.lastYearBeforePeriodResult], allItems);\r\n  data.periodTotalResult = statisticPeriodTotalResult([\r\n    data.lastYearBeforePeriodTotalResult,\r\n    data.thisYearTotalResult\r\n  ], allItems);\r\n  data.rateResult = {};\r\n  for (let name of allItems) {\r\n    data.rateResult[name] = initRate();\r\n  }\r\n  statisticRate(data.periodNewAddedResult, NEW_ADD_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, data.rateResult);\r\n  statisticRate(data.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, data.rateResult);\r\n\r\n  return data;\r\n}\r\n\r\nexport const formatGraphData = (data, allItems) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n\r\nexport const formatCategoryGraphData = (data, allItems, area) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  KEY_REPORT_TIME,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n  CATEGORIES,\n  COL_DUTY_WORKER\n} from './constants';\n\nimport { Row, Col, Tabs } from 'antd';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\n\nimport {\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories } from './store/actions';\n\nimport * as Util from './functions/utils';\n\nimport MainView from './components/MainView';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stageGraphData: {},\n      cityGraphData: {},\n      projectGraphData: {},\n      areaGraphData: {},\n      categoryGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [], allAreas = [], allWorkers = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        // get all stages\n        let stage = Util.getItem(ticket[COL_PROJECT_STAGE]);\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = Util.getItem(ticket[COL_PROJECT]);\n        if (allProjects.indexOf(project) === -1) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = Util.getItem(ticket[COL_CITY_COMPANY]);\n        console.log(city);\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n        // get all area\n        let area = Util.getItem(ticket[COL_AREA]);\n        if (allAreas.indexOf(area) === -1) {\n          allAreas = [\n            ...allAreas,\n            area\n          ];\n        }\n        // get all workers\n        let worker = Util.getItem(ticket[COL_DUTY_WORKER]);\n        if (allWorkers.indexOf(worker) === -1) {\n          allWorkers = [\n            ...allWorkers,\n            worker\n          ];\n        }\n      }\n\n      let allCategories = CATEGORIES;\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities,\n        allAreas,\n        allCategories,\n        allWorkers\n      });\n\n      addCategories(allCategories);\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((ticket) => {\n        let reportTime = moment(ticket[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计负责维保工程师\n      let workerData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_DUTY_WORKER, allWorkers);\n      this.setState({\n        workerData\n      });\n\n      // 统计分期\n      let stageData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT_STAGE, allStages)\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT, allProjects)\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_CITY_COMPANY, allCities)\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_AREA, allAreas)\n      this.setState({\n        areaData\n      });\n\n      // 画图\n      let stageGraphData = Util.formatGraphData(stageData, allStages);\n      this.setState({\n        stageGraphData\n      })\n\n      let projectGraphData = Util.formatGraphData(projectData, allProjects);\n      this.setState({\n        projectGraphData\n      });\n\n      let cityGraphData = Util.formatGraphData(cityData, allCities);\n      this.setState({\n        cityGraphData\n      });\n\n      let areaGraphData = Util.formatGraphData(areaData, allAreas);\n      this.setState({\n        areaGraphData\n      });\n\n      // 统计分类分布图\n      let categoryGraphData = Util.formatCategoryGraphData(areaData, allCategories, allAreas[0]);\n      this.setState({\n        categoryGraphData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 className=\"text--center heading\">统计辅助工具</h2>\n        <DataForm\n          onStart={this.start}\n          loading={this.state.loading}\n        />\n        <Row style={{ margin: '40px 0' }}>\n          <Col span={22} offset={1}>\n            <Tabs type=\"card\">\n              <Tabs.TabPane tab=\"统计图\" key=\"统计图\">\n                <ChartView\n                  stageGraphData={this.state.stageGraphData}\n                  projectGraphData={this.state.projectGraphData}\n                  cityGraphData={this.state.cityGraphData}\n                  areaGraphData={this.state.areaGraphData}\n                  categoryGraphData={this.state.categoryGraphData}\n                  allStages={this.state.allStages}\n                  allProjects={this.state.allProjects}\n                  allCities={this.state.allCities}\n                  allAreas={this.state.allAreas}\n                  allCategories={this.state.allCategories}\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"大区\" key=\"大区\">\n                <ProjectView\n                  data={this.state.areaData}\n                  projects={this.state.allAreas}\n                  name=\"大区\"\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"城市\" key=\"城市\">\n                <ProjectView\n                  data={this.state.cityData}\n                  projects={this.state.allCities}\n                  name=\"城市\"\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"项目\" key=\"项目\">\n                <ProjectView\n                  data={this.state.projectData}\n                  projects={this.state.allProjects}\n                  name=\"项目\"\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"分期\" key=\"分期\">\n                <ProjectView\n                  data={this.state.stageData}\n                  projects={this.state.allStages}\n                  name=\"项目分期\"\n                />\n              </Tabs.TabPane>\n              <Tabs.TabPane tab=\"工程师\" key=\"工程师\">\n                <ProjectView\n                  data={this.state.workerData}\n                  projects={this.state.allWorkers}\n                  name=\"工程师\"\n                />\n              </Tabs.TabPane>\n            </Tabs>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_AREAS = 'ADD_AREAS';\r\n","import { combineReducers } from 'redux';\r\nimport allCategories from './all-categories';\r\nimport allAreas from './all-areas';\r\n\r\nconst reducer = combineReducers({\r\n  allCategories,\r\n  allAreas\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_AREAS\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_AREAS:\r\n      const { areas } = action.payload;\r\n      return [\r\n        ...state,\r\n        areas\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { LocaleProvider } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <LocaleProvider locale={zh_CN}>\n      <App />\n    </LocaleProvider>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}